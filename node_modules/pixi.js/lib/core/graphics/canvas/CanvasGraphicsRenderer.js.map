{"version":3,"sources":["../../../../src/core/graphics/canvas/CanvasGraphicsRenderer.js"],"names":["CanvasGraphicsRenderer","renderer","render","graphics","context","worldAlpha","transform","worldTransform","resolution","setTransform","a","b","c","d","tx","ty","canvasTintDirty","dirty","_prevTint","tint","updateGraphicsTint","setBlendMode","blendMode","i","graphicsData","length","data","shape","fillColor","_fillTint","lineColor","_lineTint","lineWidth","type","POLY","beginPath","points","holes","outerArea","innerArea","moveTo","j","lineTo","closed","closePath","k","fill","globalAlpha","fillAlpha","fillStyle","toString","substr","lineAlpha","strokeStyle","stroke","RECT","fillRect","x","y","width","height","strokeRect","CIRC","arc","radius","Math","PI","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","tintR","tintG","tintB","renderPolygon","close","destroy","registerPlugin"],"mappings":"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","file":"CanvasGraphicsRenderer.js","sourcesContent":["import CanvasRenderer from '../../renderers/canvas/CanvasRenderer';\nimport { SHAPES } from '../../const';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport default class CanvasGraphicsRenderer\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    render(graphics)\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // update tint if graphics was dirty\n        if (graphics.canvasTintDirty !== graphics.dirty\n            || graphics._prevTint !== graphics.tint)\n        {\n            this.updateGraphicsTint(graphics);\n        }\n\n        renderer.setBlendMode(graphics.blendMode);\n\n        for (let i = 0; i < graphics.graphicsData.length; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            const fillColor = data._fillTint;\n            const lineColor = data._lineTint;\n\n            context.lineWidth = data.lineWidth;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                let points = shape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (shape.closed)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    for (let j = 0; j < points.length; j += 2)\n                    {\n                        outerArea += (points[j] * points[j + 3]) - (points[j + 1] * points[j + 2]);\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = holes[k].points;\n\n                        innerArea = 0;\n                        for (let j = 0; j < points.length; j += 2)\n                        {\n                            innerArea += (points[j] * points[j + 3]) - (points[j + 1] * points[j + 2]);\n                        }\n\n                        context.moveTo(points[0], points[1]);\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            for (let j = points.length - 2; j >= 2; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if (holes[k].closed)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fillRect(shape.x, shape.y, shape.width, shape.height);\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.strokeRect(shape.x, shape.y, shape.width, shape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (data.fill)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (data.fillColor || data.fillColor === 0)\n                {\n                    context.globalAlpha = data.fillAlpha * worldAlpha;\n                    context.fillStyle = `#${(`00000${(fillColor | 0).toString(16)}`).substr(-6)}`;\n                    context.fill();\n                }\n\n                if (data.lineWidth)\n                {\n                    context.globalAlpha = data.lineAlpha * worldAlpha;\n                    context.strokeStyle = `#${(`00000${(lineColor | 0).toString(16)}`).substr(-6)}`;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the tint of a graphics object\n     *\n     * @private\n     * @param {PIXI.Graphics} graphics - the graphics that will have its tint updated\n     */\n    updateGraphicsTint(graphics)\n    {\n        graphics._prevTint = graphics.tint;\n        graphics.canvasTintDirty = graphics.dirty;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphics.graphicsData.length; ++i)\n        {\n            const data = graphics.graphicsData[i];\n\n            const fillColor = data.fillColor | 0;\n            const lineColor = data.lineColor | 0;\n\n            // super inline, cos optimization :)\n            data._fillTint = (\n                (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((fillColor & 0xFF) / 255) * tintB * 255)\n            );\n\n            data._lineTint = (\n                (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                + (((lineColor & 0xFF) / 255) * tintB * 255)\n            );\n        }\n    }\n\n    /**\n     * Renders a polygon.\n     *\n     * @param {PIXI.Point[]} points - The points to render\n     * @param {boolean} close - Should the polygon be closed\n     * @param {CanvasRenderingContext2D} context - The rendering context to use\n     */\n    renderPolygon(points, close, context)\n    {\n        context.moveTo(points[0], points[1]);\n\n        for (let j = 1; j < points.length / 2; ++j)\n        {\n            context.lineTo(points[j * 2], points[(j * 2) + 1]);\n        }\n\n        if (close)\n        {\n            context.closePath();\n        }\n    }\n\n    /**\n     * destroy graphics object\n     *\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n\nCanvasRenderer.registerPlugin('graphics', CanvasGraphicsRenderer);\n"]}